//@author: a0108297x



	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Date.java
	 */


import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.GregorianCalendar;

public class Date {
	private int day, month, year;
	private Calendar cal = GregorianCalendar.getInstance();

	private static boolean dmFormat = true;

	public Date(int userday, int usermonth, int useryear) throws Exception {
		int correctedYear = correctYear(useryear);
		cal.setLenient(false);
		if (dateValid(userday, usermonth, correctedYear)) {
			this.setDay(userday);
			this.setMonth(usermonth);
			this.setYear(correctedYear);
			cal.set(correctedYear, usermonth, userday);
		} else { throw new Exception("Invalid Date"); }
	}

	public Date() {
		cal = Calendar.getInstance();
		cal.setLenient(false);
		this.day = cal.get(Calendar.DATE);
		this.month = cal.get(Calendar.MONTH) + 1;
		this.year = cal.get(Calendar.YEAR);
		getClass();
		cal.set(year, month, day);
	}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Date.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Date.java
	 */

		/*
		switch (cal.get(Calendar.DAY_OF_WEEK_IN_MONTH)) {
		case Calendar.MONDAY:
			day = "Monday";
			break;
		case Calendar.TUESDAY:
			day = "Tuesday";
			break;
		case Calendar.WEDNESDAY:
			day = "Wednesday";
			break;
		case Calendar.THURSDAY:
			day = "Thursday";
			break;
		case Calendar.FRIDAY:
			day = "Friday";
			break;
		case Calendar.SATURDAY:
			day = "Saturday";
			break;
		case Calendar.SUNDAY:
			day = "Sunday";
			break;
		}*/
	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Date.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\sortTaskByStartDate.java
	 */


package dataEncapsulation;

import java.util.Comparator;

public class sortTaskByStartDate implements Comparator<Task> {
	    public int compare(Task o1, Task o2) {
	        Task s1 =  o1;
	        Task s2 =  o2;
	        if(s1.getStartDate().isBefore(s2.getStartDate())){
	        	return -1;
	        }
	        else if(s1.getStartDate().isEquals(s2.getStartDate())){
	        	return 0;
	        }
	        else
	        	return 1;
	    }
}
	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\sortTaskByStartDate.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java
	 */

package dataEncapsulation;

import java.util.Calendar;
public class Task {

	public static final String MESSAGE_NO_END = "No Specified End Date";
	public static final String MESSAGE_NO_LOCATION = "No Specified Location";
	public static final String MESSAGE_NO_NOTE = "No Specified Note";
	public static final String MESSAGE_COMPLETED = "Yes";
	public static final String MESSAGE_NO_CATEGORY = "No Specified Category";
	private static final String NEW_LINE = System.getProperty("line.separator");

	private Date startdate = new Date();
	private Date enddate = new Date();
	private String name = new String();
	private String location = new String();
	private String note = new String();
	private String category = new String();
	private Time starttime = new Time();
	private Time endtime = new Time();

	private boolean hasDeadline = false;
	private boolean isComplete = false;
	private boolean hasNote = false;
	private boolean hasLocation = false; 
	private boolean hasStartTime = false;
	private boolean hasEndTime = false;
	private boolean isOverdue = false;
	private boolean hasCategory = false;

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java
	 */

	public Task(String name, String first_category, String location, Date start, Date end, Time s, Time e) throws Exception {
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setEndDate(end);
		this.startdate = start;
		this.setStartTime(s);
		this.setEndTime(e);
		setIfOverdue();
	}

	//has every field except END TIME
	public Task(String name, String first_category, String location, String note, Date start, Date end, Time s) throws Exception {
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setNote(note);
		this.setEndDate(end);
		this.startdate = start;
		this.setStartTime(s);
		Time autoEndTime = new Time(s.getHours() + 1, s.getMins());
		this.setEndTime(autoEndTime);
		setIfOverdue();
	}

	public Task(String name, String first_category, String location, Date start, Date end, Time s) throws Exception {
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setEndDate(end);
		this.startdate = start;
		this.setStartTime(s);
		Time autoEndTime = new Time(s.getHours() + 1, s.getMins());
		this.setEndTime(autoEndTime);
		setIfOverdue();
	}

	//has every field except TIME
	public Task(String name, String first_category, String location, String note, Date start, Date end) throws Exception {
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setNote(note);
		this.setEndDate(end);
		this.startdate = start;
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	//no loc or note or no Time
	public Task(String name, String category, Date start, Date end) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.setEndDate(end);
		this.setStartDate(start);
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}
	//no location or note but has time
	public Task(String name, String category, Date start, Date end, Time s, Time e) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.setEndDate(end);
		this.setStartDate(start);
		this.setStartTime(s);
		this.setEndTime(e);
		setIfOverdue();
	}
	//no loc or note but has start time
	public Task(String name, String category, Date start, Date end, Time s) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.setEndDate(end);
		this.setStartDate(start);
		this.setStartTime(s);
		Time autoEndTime = new Time(s.getHours() + 1, s.getMins());
		this.setEndTime(autoEndTime);
		setIfOverdue();
	}

	public Task(String name, Date start, Date end, Time s, Time e) throws Exception {
		this.setName(name);
		this.setEndDate(end);
		this.startdate = start;
		this.setStartTime(s);
		this.setEndTime(e);
		setIfOverdue();

	}
	//no start time, loc or note | | GIVEN ONLY ONE DATE = end date.
	public Task(String name, String category, Date end) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.startdate = new Date();
		enddate = end;
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	public Task(String name, Date date, Time time) throws Exception {
		this.setName(name);
		this.setStartDate(date);
		this.setEndDate(date);
		this.setStartTime(time);
		Time autoEndTime = new Time(time.getHours() + 1, time.getMins());
		this.setEndTime(autoEndTime);
		setIfOverdue();
	}
	//no extra details at all
	public Task(String name, String category) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.startdate = new Date();
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	public Task(String name, String first_category, String location) throws Exception{
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setStartDate(new Date());
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	//no start or end time but has loc and note
	public Task(String name, String first_category, String location, String note) throws Exception{
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setNote(note);
		this.setStartDate(new Date());
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}
	//No end date
	public Task(String name, String first_category, String location, String note, Date startdate) throws Exception{
		this.setName(name);
		this.setCategory(first_category);
		this.setLocation(location);
		this.setNote(note);
		this.setStartDate(startdate);
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	public Task(String name, String category, String location, Date start, Date end) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.setStartDate(start);
		this.setEndDate(end);
		this.setLocation(location);
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}

	public Task(String name, String category, String location, Date startTime) throws Exception{
		this.setName(name);
		this.setCategory(category);
		this.setLocation(location);
		this.startdate = startTime;
		this.setStartTime(new Time());
		this.setEndTime(new Time(23, 59));
		setIfOverdue();
	}
	
	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java
	 */

	private Time getNow() throws Exception {
		Calendar now = Calendar.getInstance();
		int hour = now.get(Calendar.HOUR_OF_DAY);
		int min = now.get(Calendar.MINUTE);
		Time nowAsTime = new Time(hour, min);
		return nowAsTime;
	}

	///////////////////////////////////////////////////////////GETTER SETTER

	public String getNote() {
		return note;
	}
	public void setNote(String note) {
		this.note = note;
		hasNote = true;
	}
	public String getLocation() {
		return location;
	}
	public void setLocation(String loc) {
		this.location = loc;
		hasLocation = true;
	}
	public Date getEndDate() {
		return enddate;
	}

	public Date getStartDate() {
		return startdate;
	}

	public void setStartDate(Date start) {
		startdate = start;
	}

	public void setEndDate(Date end) {
		this.enddate = end;
		if(end == null) {
			hasDeadline = false;
		} else {
			hasDeadline = true;
		}
	}

	public String getCategory() {
		return category;
	}
	public void setCategory(String category) {
		if (category == null) {
			hasCategory = false;
			return;
		}
		hasCategory = true;
		this.category = category;
		return;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean getHasDeadline() {
		return hasDeadline;
	}

	public boolean getHasNote() {
		return hasNote;
	}

	public boolean getHasLocation() {
		return hasLocation;
	}

	public boolean getIsComplete() {
		return isComplete;
	}

	public Time getStartTime() {
		setHasStartTime(true);
		return starttime;
	}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java
	 */

	public boolean isCompleted(){
		return isComplete;
	}

	public boolean hasStartTime() {
		return hasStartTime;
	}

	public void setHasStartTime(boolean hasStartTime) {
		this.hasStartTime = hasStartTime;
	}

	public boolean hasEndTime() {
		return hasEndTime;
	}

	public boolean isOverdue() throws Exception {
		if (isComplete) {
			return false;
		}

		setIfOverdue();
		return isOverdue;
	}

	public void setHasEndTime(boolean hasEndTime) {
		this.hasEndTime = hasEndTime;
	}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataEncapsulation\Task.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\dataManipulation\Search.java
	 */


import java.util.List;

import powerSearch.Searcher;
import powerSearch.SlotSearch;
import userInterface.ezCMessages;
import dataEncapsulation.BadCommandException;
import dataEncapsulation.BadSubcommandException;
import dataEncapsulation.Date;
import dataEncapsulation.Task;
import dataManipulation.CommandType.COMMAND_TYPE;

public class Search extends Command {

	public Search(List<Subcommand> commandComponents)
			throws BadCommandException, BadSubcommandException {
		super(COMMAND_TYPE.SEARCH, commandComponents);
	}

	@Override
	public String execute() throws Exception {
		TotalTaskList list = TotalTaskList.getInstance();

		if(hasSubcommandType(Subcommand.TYPE.COMPLETED)) {
			return handleCompletedSearch(list);
		} else if(hasSubcommandType(Subcommand.TYPE.FREE)) {
			return handleFreeSearch(list, subcommands);
		} else {
			return handleNormalSearch(list);
		}
		
	}

	private String handleFreeSearch(TotalTaskList list,
			List<Subcommand> components) throws BadSubcommandException,
			Exception {
		checkForComponentAmount(2);
		Date date = getDateForFree();
	//	String results = Searcher.searchTimeSlot(list.getList(), date);
		String results = SlotSearch.execute(date);
		if (results.length() == 0) {
			return "You have no free slots on " + date.toPrint();
		} else {
			return "Your free slots for " + date.toPrint() + " are: \n" + results;
		}
	}

	private String handleNormalSearch(TotalTaskList list) throws Exception {
		List<Task> results = Searcher.search(subcommands, list.getNotCompleted());
		ezCMessages messages = ezCMessages.getInstance();
		return messages.getStringOfTasks(results);
	}

	private String handleCompletedSearch(TotalTaskList list) throws Exception {
		List<Task> results = Searcher.search(subcommands, list.getCompleted());
		ezCMessages messages = ezCMessages.getInstance();
		return messages.getStringOfTasks(results);
	}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\dataManipulation\Search.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\ExactMatchSearcher.java
	 */

/**
 * Performs an Exact Search on a List<Task> based on Different Keys given
 * @return format: List<Task>
 */
package powerSearch;


import java.util.ArrayList;
import java.util.List;

import dataEncapsulation.BadCommandException;
import dataEncapsulation.BadSubcommandArgException;
import dataEncapsulation.BadSubcommandException;
import dataEncapsulation.Date;
import dataEncapsulation.Task;
import dataEncapsulation.Time;
import dataManipulation.Add;
import dataManipulation.Subcommand;
import dataManipulation.TotalTaskList;

public class ExactMatchSearcher {
	public static List<Task> taskList;
	public static List<Task> exactSearch(Subcommand key, List<Task> list) throws Exception {
		taskList = list;
		switch (key.getType()) {
		case NAME:
			return simpleSearchName(key.getContents());
		case TITLE:
			return simpleSearchName(key.getContents());
		case CATEGORY:
			return simpleSearchCategory(key.getContents());
		case LOCATION:
			return simpleSearchLocation(key.getContents());
		case NOTE:
			return simpleSearchNote(key.getContents()); //returns all Tasks that have the key as a substring within Notes
		case END:
			return simpleSearchEndDate(key.getContents()); 
		case START:
			return simpleSearchStartDate(key.getContents());
		case DATE:
			return simpleSearchDate(key.getContents());
		case STARTTIME:
			return simpleSearchStartTime(key.getContents());
		case ENDTIME:
			return simpleSearchEndTime(key.getContents());
		default :
			throw new 
			IllegalArgumentException("invalid subcommand for search");
		}
	}

	/*
	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\ExactMatchSearcher.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\NearMatchSearcher.java
	 */


package powerSearch;

import java.util.ArrayList;
import java.util.List;

import dataEncapsulation.Task;
import dataManipulation.Subcommand;
import dataManipulation.TotalTaskList;

public class NearMatchSearcher{
	public static List<Task> taskList;
	public static List<Task> nearSearch(Subcommand key, List<Task> list) throws Exception {
		taskList = list;
		List<Task> answer = new ArrayList<Task>();
		switch (key.getType()){
		case TITLE:
			answer.add(nearSearchName(key.getContents()));
			return answer;
		case CATEGORY:
			return nearSearchCategory(key.getContents());
		case LOCATION:
			return nearSearchLocation(key.getContents());
		case NOTE:
			return nearSearchNote(key.getContents());
		default:
			break;
		}
		return answer;
	}
	
	private static Task nearSearchName(String key){
		int length1, length2, diff;
		length2 = key.length();
		Task temp = null;
		for (int i = 0; i < taskList.size(); ++i) {
			length1 = taskList.get(i).getName().length();
			diff = Math.abs(length2 - length1);
			if (diff <= 2) {
				temp = taskList.get(i);
				return temp;
			}
		}
		return temp;
	}
	
	private static List<Task> nearSearchCategory(String key){
		List<Task> answer = new ArrayList<Task>();
		int length1, length2, diff;
		length2 = key.length();
		for (int i = 0; i < taskList.size(); ++i) {
			length1 = taskList.get(i).getCategory().length();
			diff = Math.abs(length2 - length1);
			if (diff <= 2) {
				answer.add(taskList.get(i));
			}
		}
		return answer;
	}
	
	private static List<Task> nearSearchNote(String key){
		List<Task> answer = new ArrayList<Task>();
		int length1, length2, diff;
		length2 = key.length();
		for (int i = 0; i < taskList.size(); ++i) {
			length1 = taskList.get(i).getNote().length();
			diff = Math.abs(length2 - length1);
			if (diff <= 2) {
				answer.add(taskList.get(i));
			}
		}
		return answer;
	}
	
	private static List<Task> nearSearchLocation(String key){
		List<Task> answer = new ArrayList<Task>();
		int length1, length2, diff;
		length2 = key.length();
		for (int i = 0; i < taskList.size(); ++i) {
			length1 = taskList.get(i).getLocation().length();
			diff = Math.abs(length2 - length1);
			if (diff <= 2) {
				answer.add(taskList.get(i));
			}
		}
		return answer;
	}
	
	public static boolean isTaskDuplicate(Task taskToCheck) {
		for(Task t : TotalTaskList.getInstance().getList()) {
			if(t.getName().toLowerCase().equals(taskToCheck.getName().toLowerCase())) {
				return true;
			}
		}
		return false;
	}
	
}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\NearMatchSearcher.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\Searcher.java
	 */


/**
	 * Takes a list and searches for various details
	 * @return format: String or List of Tasks
	 */
package powerSearch;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.ListUtils;

import dataEncapsulation.Date;
import dataEncapsulation.Task;
import dataManipulation.Subcommand;

public class Searcher {
	/**
	 * searches for exact/near matches to search key
	 * @param keylist and a list of tasks
	 * @return a list of all matches for that key
	 * @throws Exception 
	 */
	public static List<Task> search(List<Subcommand> keylist, List<Task> list) throws Exception {
		int i;
		List<List<Task>> answer = new ArrayList<List<Task>>();
		assert(keylist!=null);
		assert(list!=null);
		String command = new String();
		for(i=0; i<keylist.size(); i++){
			switch(keylist.get(i).getType()){
			case AND:
				command = "AND";
				break;
			case OR:
				command = "OR";
				break;
			default:
				answer.add(ExactMatchSearcher.exactSearch(keylist.get(i), list));
			}
		}
		if(answer.get(0).isEmpty()){
			for(i=0; i<keylist.size(); i++){
				switch(keylist.get(i).getType()){
				case AND:
					command = "AND";
					break;
				case OR:
					command = "OR";
					break;
				default:
					answer.add(NearMatchSearcher.nearSearch(keylist.get(i), list));
				}
			}
		}
		List<Task> results = new ArrayList<Task>();
		switch(command){
		case "OR":
			results = mergeListsOR(answer);
			break;
		case "AND":
			results = mergeListsAND(answer);
			break;
		default:
			results = mergeListsOR(answer);
		}
		return Searcher.removeDuplicates(results);
	}
	//Parameters: List of Lists which have Tasks
	//It merges the lists returned according to the OR Command
	private static List<Task> mergeListsOR(List<List<Task>> answer) throws Exception{
		if(answer.isEmpty()) {
			return new ArrayList<Task>();
		} else {
		List<Task> list = new ArrayList<Task>();
		list = answer.get(0);
		for(int i = 1; i < answer.size(); i++){
			list.addAll(answer.get(i));
		}
		if(list.size()>=2){
			list = removeDuplicates(list);
			return list;
		}
		else if(list.isEmpty())
			return new ArrayList<Task>();
		else
			return list;
		}
	}
	//Parameters: List which has Tasks
	//It removes any duplicates in the final answer
	private static List<Task> removeDuplicates(List<Task> list){
		int k=0;
		Task t1;
		while(k<=list.size()-1){
			if(list.get(k)!=null)
				t1 = list.get(k);
			else
				t1 = list.get(++k);
			for(int i = 0; i < list.size(); i++){
				if(list.get(i)!=null){
					if(t1.isEqualTask(list.get(i)) && i!=k){
						list.remove(i);
					}
				}
				else
					list.remove(i);
			}
			k++;
		}
		return list;
	}
	//Parameters: List of Lists which have Tasks
	//It merges the lists returned according to the AND Command
	@SuppressWarnings("unchecked")
	private static List<Task> mergeListsAND(List<List<Task>> answer){
		if(answer.isEmpty()) {
			return new ArrayList<Task>();
		} else {
		List<Task> list = new ArrayList<Task>();
		list = answer.get(0);
		for(int i = 1; i < answer.size(); i++){
			list = ListUtils.intersection(list, answer.get(i));
		}
		if(list.size()>=2){
			list = removeDuplicates(list);
			return list;
		}
		else if(list.isEmpty())
			return new ArrayList<Task>();
		else
			return list;
		}
	}
	//Parameters: List of Tasks and the Date which is to be searched
	//Searches for the next available free slot on a specified date.
	public static String searchTimeSlot(List<Task> list, Date dt){
		String answer = new String();
		List<Task> search = new ArrayList<Task>();
		int[] seconds = new int[86401];
		for(int k=1; k<=86400; k++){
			seconds[k] = 0;
		}
		search = ExactMatchSearcher.simpleSearchDate(dt, list);
		if(search.isEmpty()){
			answer = "All slots on " + dt.toString() + " are free to be scheduled.\n";
			return answer;
		}
		for(int i=0; i<search.size(); i++){
			if(search.get(i).getEndDate().isEquals(dt) && search.get(i).getStartDate().isEquals(dt)){ //the task starts and ends on same day
				Task sdtemp = search.get(i);
				int sdhours, sdmins, sdseconds, edhours, edmins, edseconds;
				if(sdtemp.hasStartTime()){
					sdhours = sdtemp.getStartTime().getHours();
					sdmins = sdtemp.getStartTime().getMins();
					sdseconds = 0;
				}
				else{
					sdhours = 0;
					sdmins = 0;
					sdseconds = 0;
				}
				int totalsdseconds = sdseconds + sdhours*60*60 + sdmins*60;
				if(sdtemp.hasEndTime()){
					edhours = sdtemp.getEndTime().getHours();
					edmins = sdtemp.getEndTime().getMins();
					edseconds = 0;
				}
				else{
					edhours = 23;
					edmins = 59;
					edseconds = 59;
				}
				int totaledseconds = edseconds + edhours*60*60 + edmins*60;
				for(int j=totalsdseconds; j<=totaledseconds; j++){
					seconds[j]++;
				}
			}
			else if(search.get(i).getStartDate().isEquals(dt)){ //the task starts on the mentioned date
				Task sdtemp = search.get(i);
				int sdhours, sdmins, sdseconds;
				if(sdtemp.hasStartTime()){
					sdhours = sdtemp.getStartTime().getHours();
					sdmins = sdtemp.getStartTime().getMins();
					sdseconds = 0;
				}
				else{
					sdhours = 0;
					sdmins = 0;
					sdseconds = 0;
				}
				int totalsdseconds = sdseconds + sdhours*60*60 + sdmins*60;

				for(int j=totalsdseconds; j<seconds.length; j++){
					seconds[j]++;
				}
			}
			else if(search.get(i).getEndDate().isEquals(dt)){ //the task ends on the mentioned date
				Task edtemp = search.get(i);
				int edhours, edmins, edseconds;
				if(edtemp.hasEndTime()){
					edhours = edtemp.getEndTime().getHours();
					edmins = edtemp.getEndTime().getMins();
					edseconds = 0;
				}
				else{
					edhours = 23;
					edmins = 59;
					edseconds = 59;
				}
				int totaledseconds = edseconds + edhours*60*60 + edmins*60;
				for(int j=1; j<=totaledseconds; j++){
					seconds[j]++;
				}
			}
			else if(dt.isBefore(search.get(i).getEndDate()) && search.get(i).getStartDate().isBefore(dt)){
				answer = "None of the slots on " + dt.toString() + " are free to be scheduled.\n";
				return answer;
			}
		}
		int start, end;
		start = 86402;
		end = 86402;
		for(int i=1; i<seconds.length; i++){
			if(i>0 && i<86400){
				if(seconds[i]==0 && seconds[i-1]>0){
					start = i;
				}
				else if(seconds[i]==0 && seconds[i+1]>0){
					end = i+1;
					break;
				}
			}
		}
		if(end==86402 && start==86402){
			answer = "None of the slots on " + dt.toString() + " are free to be scheduled.\n";
			return answer;
		}
		if(Math.abs(end - start)<60){
			answer = "None of the slots on " + dt.toString() + " are free to be scheduled.\n";
			return answer;
		}
		if(start == 86402){
			start = 0;
		}
		if(end == 86402){
			end = 0;
		}
		int starthour, startmin, endhour, endmin;
		starthour = start/3600;
		startmin = start/60 - starthour*60;
		
		endhour = end/3600;
		endmin = end/60 - endhour*60;
		
		String startTime = getTimeString(starthour, startmin);
		String endTime = getTimeString(endhour, endmin);
		
		answer = "Free Slot Found on " + dt.toString() + '\n';
		if(endTime.equals("00:00")){
			answer = answer + startTime + " to " + endTime + "(Next Day)" + '\n';
		}
		else
			answer = answer + startTime + " to " + endTime + '\n';
		return answer;
	}

	/**
	 * Takes time in hours and minutes and returns the string of that time
	 * @return format: "hour:min" (ex. "10:04")
	 */
	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\Searcher.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\SearcherTest.java
	 */


/**
	 * Tests the different searches within Searcher Class
	 * @return format: String
	 */
package powerSearch;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import dataEncapsulation.Date;
import dataEncapsulation.Task;
import dataEncapsulation.Time;
import dataManipulation.Subcommand;

public class SearcherTest {

	@Test
	public void testSearch() throws Exception {
		List<Task> tasks = new ArrayList<Task>();
		Date temp1 = new Date();
		Date temp2 = new Date(9,12,2014);
		String location = new String("CSC");
		tasks.add(new Task("Andrew", "A", location, temp1, new Date(25,9,2018)));
		tasks.add(new Task("Bravo", "B", temp2, new Date(26,9,2015)));
		tasks.add(new Task("Charlie", "C", temp2, new Date(11,12,2014)));
		tasks.add(new Task("Lunch with bobby green", "C", "raj restaurant", temp2, new Date(25,12,2014)));
		//System.out.println(tasks);
		List<Subcommand> listCC = new ArrayList<Subcommand>();
		listCC.add(new Subcommand(Subcommand.TYPE.TITLE, "bra"));
		listCC.add(new Subcommand(Subcommand.TYPE.OR, "and"));
		listCC.add(new Subcommand(Subcommand.TYPE.LOCATION, "rest"));
		System.out.println(Searcher.search(listCC, tasks));
	}

	@Test
	public void testSearchTimeSlots() throws Exception {
		List<Task> tasks = new ArrayList<Task>();
		Date start1 = new Date(7, 11, 2014);
		Date end1 = new Date(16,11,2014);
		Date start2 = new Date(2, 11, 2014);
		Date end2 = new Date(7, 11, 2014);
		Time time1 = new Time(7, 0);
		Time time3 = new Time(22, 50);
		Time time4 = new Time(23, 59);
		String location = new String("CSC");
		tasks.add(new Task("Bobby Green", "A", location, start1, end1, time3, time4));
		tasks.add(new Task("Bravo", "B", location, start2, end2, time1));
		
		System.out.println(Searcher.searchTimeSlot(tasks, new Date(7,11,2014)));
	}
}

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\SearcherTest.java





	/**
	 * origin: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\SlotSearch.java
	 */


import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

import dataEncapsulation.BadSubcommandArgException;
import dataEncapsulation.BadSubcommandException;
import dataEncapsulation.Date;
import dataEncapsulation.Task;
import dataEncapsulation.Time;
import dataEncapsulation.StartComparator;
import dataManipulation.TotalTaskList;

public class SlotSearch {
	
	TotalTaskList tl = TotalTaskList.getInstance();
	List<Time> freeSlots;
	static List<Task> longTermTasks;
	
	public static String execute(Date d) throws Exception {
		String ans ="";
		longTermTasks = new ArrayList<Task>();
		List<Slot> slots = findFreeSlotsOn(d);
		for (int i=slots.size()-1; i>=0; i--) {
			ans = ans + "\n" + slots.get(i).toString();
		}
		ans = ans + "\n\nRunning Tasks: \n\n" + runningTasks(longTermTasks, d);
		return ans;
	}
	
	public static List<Slot> findFreeSlotsOn(Date d) throws Exception { 
		List<Task> tasksOnD = tasksFor(d);
		Stack<Time> se = new Stack<Time>();
		List<Slot> freeslots = new ArrayList<Slot>();
		se.push(new Time(0,0));
		for (int i=0; i<tasksOnD.size(); i++) {
			Task t = tasksOnD.get(i);
			Time previous = se.peek();
			Time start = t.getStartTime();
			Time end = t.getEndTime();
			if(start.compareTo(previous) <= 0) {
				se.pop();
				se.push(end);
			} else {
				se.push(start);
				se.push(end);
			}
		}
		se.push(new Time(23,59));
		/*
		for (int i=0; i<se.size(); i=i+2) {
			Time freeStart = se.get(i);
			Time freeEnd = se.get(i+1);
			Slot freeSlot = new Slot(freeStart, freeEnd);
			freeslots.add(freeSlot);
		}*/
		while (!se.empty()) {
			Time freeEnd = se.pop();
			Time freeStart = se.pop();
			Slot freeSlot = new Slot(freeStart, freeEnd);
			freeslots.add(freeSlot);
		}
		return freeslots;
	}
	
	public static List<Task> tasksFor(Date d) throws BadSubcommandException, BadSubcommandArgException {
		List<Task> results = new ArrayList<Task>();
		List<Task> allTasks = TotalTaskList.getInstance().getList();
		for (Task t : allTasks) {
			Date end = t.getEndDate();
			Date start = t.getStartDate();
			boolean taskEndsToday = d.isEquals(end);
			boolean taskStartsToday = d.isEquals(start);
			boolean taskEndsAfterToday = d.isBefore(end) || taskEndsToday;
			boolean taskStartsBeforeToday = start.isBefore(d) || taskStartsToday;
			if (taskEndsToday && taskStartsToday ) { //single day task
				results.add(t);
			} else if (taskEndsAfterToday && taskStartsBeforeToday) {
				longTermTasks.add(t);
			}
		}
		Collections.sort(results, new StartComparator());
		return results;
	}	
	
	private static String runningTasks(List<Task> ltt, Date today) {
		String res = "";
		Collections.sort(ltt, new StartComparator());
		for (int i=0; i<ltt.size(); i++) {
			Task t= ltt.get(i);
			Date startDate = t.getStartDate();
			Date endDate = t.getEndDate();
			Time endTime = t.getEndTime();
			Time startTime = t.getStartTime();
			if (today.isEquals(endDate)) {
				res = res + t.getName() + " ends on this day at " + endTime.toString() + "\n";
			} else if (today.isEquals(startDate)) {
				res = res + t.getName() + " starts on this day at " + startTime.toString() + "\n";
			} else {
				res = res + t.getName() + " started " + startDate.toPrint() +
						" and ends " + endDate.toPrint() ;
			}
		}
		return res;
	}
}

class Slot {
	private Time slotStart;
	private Time slotEnd;
	
	public Slot(Time start, Time end) {
		slotStart = start;
		slotEnd = end;
	}
	
	public Time getStart() {
		return slotStart;
	}
	public Time getEnd() {
		return slotEnd;
	}
	
	public String toString() {
		return "From " + getStart().toString() + " to " + getEnd().toString() ;
	}
} 

	// End of segment: C:\Users\Kiri\Documents\ezC\name\src\powerSearch\SlotSearch.java





